{"ast":null,"code":"var _jsxFileName = \"/Users/shinny/Desktop/ExpertAI/react-flask-app/src/NewForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Button from '@material-ui/core/Button';\nimport { TextField } from '@material-ui/core';\nimport Dashboard from './Dashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NewForm() {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [fetchedData, setFetchedData] = useState(\"\");\n  const [isSubmitted, setSubmitted] = useState(false);\n  const [submitDisabled, setSubmitDisabled] = useState(true);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSubmitted(true);\n    console.log(\"button clicked\");\n    const config = {\n      headers: {\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:5000/process\", {\n      text: text\n    }, config).then(res => {\n      console.log(\"res\", res);\n      setFetchedData(res.data); // whatever the data you want to set in the setFetchedData you can set with res\n    }).catch(er => {\n      console.log(er.response.data);\n    });\n  }; // const handleSubmit = async event => {\n  //   event.preventDefault();\n  //   //\n  //   const response = await axios.post(\"http://localhost:5000\", {text}).then((response) => {\n  //     setFetchedData(response.data)}).catch((er) => {\n  //             console.log(er);\n  //     });\n  //   console.log(response);\n  //   console.log(response.data);\n  // };\n  // Add a function that will return N characters, wrapped inside JSX, where N is the length of the input in the textarea\n\n\n  function displayLength() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [text.length, \" characters!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  } // function validateFieldLength() {\n  //   if (submitDisabled && text.length > 100) {\n  //     setSubmitDisabled(false);\n  //   } else if (!submitDisabled && text.length <= 100) {\n  //     setSubmitDisabled(true);\n  //   }\n  // }\n  // // the function called upon onChange\n  // const updateFieldLength = e => (\n  //   setText(e.target.value), () => (\n  //    validateFieldLength()\n  //   )\n  // )\n\n\n  if (isSubmitted) {\n    return /*#__PURE__*/_jsxDEV(Dashboard, {\n      props: (fetchedData.pathos, fetchedData.logos, fetchedData.ethos)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      method: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Input text: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Must be at least 100 characters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 54\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          multiline: true,\n          variant: \"outlined\",\n          name: \"text\",\n          value: text,\n          onChange: e => setText(e.target.value) // onChange={updateFieldLength} OLD NONWORKING WAY\n          ,\n          cols: 25,\n          rows: 10,\n          placeholder: \"Enter text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: text.length <= 3,\n        variant: \"contained\",\n        color: \"secondary\",\n        type: \"submit\",\n        name: \"Submit\",\n        children: \"SUBMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }, this), displayLength()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NewForm, \"RQ1buROzcAjFpUVZoT4LYAOaigI=\");\n\n_c = NewForm;\nexport default NewForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewForm\");","map":{"version":3,"sources":["/Users/shinny/Desktop/ExpertAI/react-flask-app/src/NewForm.js"],"names":["React","useState","axios","Button","TextField","Dashboard","NewForm","text","setText","fetchedData","setFetchedData","isSubmitted","setSubmitted","submitDisabled","setSubmitDisabled","handleSubmit","e","preventDefault","console","log","config","headers","post","then","res","data","catch","er","response","displayLength","length","pathos","logos","ethos","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Button from '@material-ui/core/Button';\nimport { TextField } from '@material-ui/core';\nimport Dashboard from './Dashboard';\n\n\nfunction NewForm() {\n  const [text, setText] = useState(\"\");\n  const [fetchedData, setFetchedData] = useState(\"\");\n  const [isSubmitted, setSubmitted] = useState(false);\n\n  const [submitDisabled, setSubmitDisabled] = useState(true);\n  \n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSubmitted(true) \n\n    \n    console.log(\"button clicked\");\n\n    const config = {\n      headers: {'Access-Control-Allow-Origin': '*'}\n  };\n\n    axios\n      .post(\"http://localhost:5000/process\", {\n        text: text,\n      }, config)\n      .then((res) => {\n        console.log(\"res\", res);\n        setFetchedData(res.data); // whatever the data you want to set in the setFetchedData you can set with res\n      })\n      .catch((er) => {\n        console.log(er.response.data);\n      });\n      \n    }\n\n    // const handleSubmit = async event => {\n    //   event.preventDefault();\n    \n    //   //\n    //   const response = await axios.post(\"http://localhost:5000\", {text}).then((response) => {\n    //     setFetchedData(response.data)}).catch((er) => {\n    //             console.log(er);\n    //     });\n    \n    //   console.log(response);\n    //   console.log(response.data);\n  \n    \n    // };\n\n  // Add a function that will return N characters, wrapped inside JSX, where N is the length of the input in the textarea\n  function displayLength() {\n    return (\n      <div>\n        <p>{text.length} characters!</p>\n      </div>\n    )\n  }\n\n  // function validateFieldLength() {\n  //   if (submitDisabled && text.length > 100) {\n  //     setSubmitDisabled(false);\n  //   } else if (!submitDisabled && text.length <= 100) {\n  //     setSubmitDisabled(true);\n  //   }\n  // }\n\n  // // the function called upon onChange\n  // const updateFieldLength = e => (\n  //   setText(e.target.value), () => (\n  //    validateFieldLength()\n  //   )\n  // )\n   \n  \n  if (isSubmitted) {\n    return <Dashboard props={fetchedData.pathos, fetchedData.logos, fetchedData.ethos} />\n  }\n  return (\n    <div>\n    <form onSubmit={handleSubmit} method=\"post\">\n      <label>\n      <strong>Input text: </strong><br />\n      <small>Must be at least 100 characters.</small><br />\n        <TextField multiline={true} variant=\"outlined\"\n          name=\"text\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          // onChange={updateFieldLength} OLD NONWORKING WAY\n          cols={25}\n          rows={10}\n          placeholder=\"Enter text\"\n        />\n      </label>\n      <br />\n      <Button disabled={text.length <= 3} variant=\"contained\" color=\"secondary\" type=\"submit\" name=\"Submit\">\n        SUBMIT\n      </Button>\n    </form>\n    {displayLength()}\n    {/* {isSubmitted && <Dashboard/>} */}\n    </div> \n    );\n    }\n\n\nexport default NewForm;"]},"metadata":{},"sourceType":"module"}