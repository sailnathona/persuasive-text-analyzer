{"ast":null,"code":"var _jsxFileName = \"/Users/shinny/Desktop/ExpertAI/react-flask-app/src/WordCloud.js\";\nimport React from 'react';\nimport ReactWordcloud from 'react-wordcloud'; // var wordsArray = ['text', 'mistake', 'thought', 'bad']\n// var newArray = wordsArray.map(myFunction)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction myFunction(string) {\n  return {\n    text: string,\n    value: randomIntFromInterval(20, 65)\n  };\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included \n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction WordCloud({\n  phrases\n}) {\n  if (phrases) {\n    var commentNodes = this.props.data.map(function (comment) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: comment.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this);\n    });\n  }\n\n  var newArray = phrases.map(myFunction);\n  return /*#__PURE__*/_jsxDEV(ReactWordcloud, {\n    words: newArray\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n}\n\n_c = WordCloud;\nexport default WordCloud;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordCloud\");","map":{"version":3,"sources":["/Users/shinny/Desktop/ExpertAI/react-flask-app/src/WordCloud.js"],"names":["React","ReactWordcloud","myFunction","string","text","value","randomIntFromInterval","min","max","Math","floor","random","WordCloud","phrases","commentNodes","props","data","map","comment","author","newArray"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,iBAA3B,C,CAEA;AACA;;;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACxB,SAAO;AAACC,IAAAA,IAAI,EAAED,MAAP;AAAeE,IAAAA,KAAK,EAAEC,qBAAqB,CAAC,EAAD,EAAK,EAAL;AAA3C,GAAP;AACH;;AAED,SAASA,qBAAT,CAA+BC,GAA/B,EAAoCC,GAApC,EAAyC;AAAE;AACvC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;AAEH,SAASK,SAAT,CAAmB;AAACC,EAAAA;AAAD,CAAnB,EAA8B;AAC5B,MAAIA,OAAJ,EAAa;AACX,QAAIC,YAAY,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,GAAhB,CAAoB,UAAUC,OAAV,EAAkB;AACrD,0BACE;AAAA,+BACE;AAAA,oBAAKA,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKH,KANkB,CAAnB;AAOD;;AAED,MAAIC,QAAQ,GAAGP,OAAO,CAACI,GAAR,CAAYf,UAAZ,CAAf;AACA,sBAAO,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAEkB;AAAvB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;KAbQR,S;AAeT,eAAeA,SAAf","sourcesContent":["import React from 'react';\nimport ReactWordcloud from 'react-wordcloud';\n \n// var wordsArray = ['text', 'mistake', 'thought', 'bad']\n// var newArray = wordsArray.map(myFunction)\n\nfunction myFunction(string) {\n    return {text: string, value: randomIntFromInterval(20, 65)}\n}\n\nfunction randomIntFromInterval(min, max) { // min and max included \n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n \nfunction WordCloud({phrases}) {\n  if (phrases) {\n    var commentNodes = this.props.data.map(function (comment){\n        return (\n          <div>\n            <h1>{comment.author}</h1>\n          </div>\n        );\n    });\n  }\n  \n  var newArray = phrases.map(myFunction)\n  return <ReactWordcloud words={newArray} />\n}\n\nexport default WordCloud;"]},"metadata":{},"sourceType":"module"}