{"ast":null,"code":"var _jsxFileName = \"/Users/shinny/Desktop/ExpertAI/react-flask-app/src/NewForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Button from '@material-ui/core/Button';\nimport { TextField } from '@material-ui/core';\nimport Dashboard from './Dashboard';\nimport LoadingSpinner from './LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NewForm() {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [fetchedData, setFetchedData] = useState(\"\");\n  const [isSubmitted, setSubmitted] = useState(false);\n  const [submitDisabled, setSubmitDisabled] = useState(true);\n  const [isLoading, setLoading] = useState(true);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSubmitted(true);\n    console.log(\"button clicked\");\n    const config = {\n      headers: {\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:5000/process\", {\n      text: text\n    }, config).then(res => {\n      console.log(\"res\", res);\n      setFetchedData(res.data); // data you want to set in the setFetchedData is set with res\n\n      setLoading(false);\n    }).catch(er => {\n      console.log(er.response.data);\n    });\n  }; // Add a function that will return N characters, wrapped inside JSX, where N is the length of the input in the textarea\n\n\n  function displayLength() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [text.length, \" characters!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (isSubmitted) {\n    return loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n      pathos: fetchedData.pathos,\n      logos: fetchedData.logos,\n      ethos: fetchedData.ethos,\n      subj_score: fetchedData.subj_score,\n      num_questions: fetchedData.num_questions,\n      phrases_array: fetchedData.phrases,\n      avg_len: fetchedData.avg_len\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 45\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      method: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Input text: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Must be at least 100 characters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 54\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          multiline: true,\n          variant: \"outlined\",\n          name: \"text\",\n          value: text,\n          onChange: e => setText(e.target.value) // onChange={updateFieldLength} OLD NONWORKING WAY\n          ,\n          cols: 25,\n          rows: 10,\n          placeholder: \"Enter text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: text.length <= 3,\n        variant: \"contained\",\n        color: \"secondary\",\n        type: \"submit\",\n        name: \"Submit\",\n        children: \"SUBMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this), displayLength()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NewForm, \"JOF8xpsJWVlcVtFpepPgTovp09k=\");\n\n_c = NewForm;\nexport default NewForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewForm\");","map":{"version":3,"sources":["/Users/shinny/Desktop/ExpertAI/react-flask-app/src/NewForm.js"],"names":["React","useState","axios","Button","TextField","Dashboard","LoadingSpinner","NewForm","text","setText","fetchedData","setFetchedData","isSubmitted","setSubmitted","submitDisabled","setSubmitDisabled","isLoading","setLoading","handleSubmit","e","preventDefault","console","log","config","headers","post","then","res","data","catch","er","response","displayLength","length","loading","pathos","logos","ethos","subj_score","num_questions","phrases","avg_len","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Button from '@material-ui/core/Button';\nimport { TextField } from '@material-ui/core';\nimport Dashboard from './Dashboard';\nimport LoadingSpinner from './LoadingSpinner'\n\n\nfunction NewForm() {\n  const [text, setText] = useState(\"\");\n  const [fetchedData, setFetchedData] = useState(\"\");\n  const [isSubmitted, setSubmitted] = useState(false);\n\n  const [submitDisabled, setSubmitDisabled] = useState(true);\n  const [isLoading, setLoading] = useState(true)\n  \n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSubmitted(true) \n\n    \n    console.log(\"button clicked\");\n\n    const config = {\n      headers: {'Access-Control-Allow-Origin': '*'}\n  };\n\n    axios\n      .post(\"http://localhost:5000/process\", {\n        text: text,\n      }, config)\n      .then((res) => {\n        console.log(\"res\", res);\n        setFetchedData(res.data); // data you want to set in the setFetchedData is set with res\n        setLoading(false)\n      })\n      .catch((er) => {\n        console.log(er.response.data);\n      });\n      \n    }\n\n\n  // Add a function that will return N characters, wrapped inside JSX, where N is the length of the input in the textarea\n  function displayLength() {\n    return (\n      <div>\n        <p>{text.length} characters!</p>\n      </div>\n    )\n  }\n \n  if (isSubmitted) {\n    return ( loading ? <LoadingSpinner /> : <Dashboard pathos={fetchedData.pathos} \n                      logos={fetchedData.logos} \n                      ethos={fetchedData.ethos} \n                      subj_score={fetchedData.subj_score}\n                      num_questions={fetchedData.num_questions}\n                      phrases_array={fetchedData.phrases}\n                      avg_len={fetchedData.avg_len}\n                      />\n    );\n  }\n  return (\n    <div>\n    <form onSubmit={handleSubmit} method=\"post\">\n      <label>\n      <strong>Input text: </strong><br />\n      <small>Must be at least 100 characters.</small><br />\n        <TextField multiline={true} variant=\"outlined\"\n          name=\"text\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          // onChange={updateFieldLength} OLD NONWORKING WAY\n          cols={25}\n          rows={10}\n          placeholder=\"Enter text\"\n        />\n      </label>\n      <br />\n      <Button disabled={text.length <= 3} variant=\"contained\" color=\"secondary\" type=\"submit\" name=\"Submit\">\n        SUBMIT\n      </Button>\n    </form>\n    {displayLength()}\n    {/* {isSubmitted && <Dashboard/>} */}\n    </div> \n    );\n    }\n\n\nexport default NewForm;"]},"metadata":{},"sourceType":"module"}