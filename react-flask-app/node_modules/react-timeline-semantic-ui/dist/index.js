'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _semanticUiReact = require('semantic-ui-react');

require('semantic-ui-css/semantic.min.css');

require('./style.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Timeline = function (_Component) {
  _inherits(Timeline, _Component);

  function Timeline() {
    _classCallCheck(this, Timeline);

    return _possibleConstructorReturn(this, (Timeline.__proto__ || Object.getPrototypeOf(Timeline)).apply(this, arguments));
  }

  _createClass(Timeline, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          direction = _props.direction,
          icon = _props.icon,
          title = _props.title,
          time = _props.time,
          description = _props.description,
          tags = _props.tags,
          labelColor = _props.labelColor,
          _props$lineHeight = _props.lineHeight,
          lineHeight = _props$lineHeight === undefined ? 4 : _props$lineHeight,
          _props$lineColor = _props.lineColor,
          lineColor = _props$lineColor === undefined ? 'grey' : _props$lineColor,
          _props$color = _props.color,
          color = _props$color === undefined ? 'grey' : _props$color;

      var textAlign = direction === 'left' ? 'right' : 'left';
      var card = _react2.default.createElement(
        _semanticUiReact.Card,
        { fluid: true, raised: true, color: color },
        _react2.default.createElement(
          _semanticUiReact.Card.Content,
          null,
          _react2.default.createElement(
            _semanticUiReact.Label,
            { pointing: textAlign, color: labelColor, attached: 'top', style: { marginLeft: '0' } },
            time
          ),
          _react2.default.createElement(
            _semanticUiReact.Card.Header,
            null,
            title
          ),
          _react2.default.createElement(
            _semanticUiReact.Card.Description,
            null,
            description
          ),
          _react2.default.createElement(_semanticUiReact.Divider, null),
          _react2.default.createElement(
            _semanticUiReact.Label.Group,
            { color: color },
            tags.map(function (tag, i) {
              return _react2.default.createElement(
                _semanticUiReact.Label,
                { key: i.toString() },
                tag
              );
            })
          )
        )
      );

      var left = direction === 'left' ? card : '';
      var right = direction === 'right' ? card : '';
      var isMobile = window.innerWidth <= 768;
      var iconSize = isMobile ? 'small' : 'large';
      var height = isMobile ? lineHeight * 350 + 'px' : lineHeight * 250 + 'px';

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement('div', { className: 'Timeline-line', style: { height: height, background: lineColor } }),
        _react2.default.createElement(
          _semanticUiReact.Grid,
          null,
          _react2.default.createElement(
            _semanticUiReact.Grid.Row,
            null,
            _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 2 }),
            _react2.default.createElement(
              _semanticUiReact.Grid.Column,
              { width: 5 },
              left
            ),
            _react2.default.createElement(
              _semanticUiReact.Grid.Column,
              { width: 2 },
              _react2.default.createElement(_semanticUiReact.Icon, { name: icon, size: iconSize, color: color, inverted: true, circular: true, style: { margin: 'auto', boxShadow: '0 0 0 0.1em ' + lineColor + ' inset' } })
            ),
            _react2.default.createElement(
              _semanticUiReact.Grid.Column,
              { width: 5 },
              right
            ),
            _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 2 })
          )
        )
      );
    }
  }]);

  return Timeline;
}(_react.Component);

Timeline.propTypes = {
  direction: _propTypes2.default.string,
  icon: _propTypes2.default.string,
  title: _propTypes2.default.string,
  time: _propTypes2.default.string,
  description: _propTypes2.default.string,
  color: _propTypes2.default.string
};

exports.default = Timeline;